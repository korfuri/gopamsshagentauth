package gopamsshagentauth_test

import (
	//"crypto/rand"
	"fmt"

	"golang.org/x/crypto/ssh"
)

var (
	testPrivateKeys map[string]interface{}
	testSigners     map[string]ssh.Signer
	testPublicKeys  map[string]ssh.PublicKey
)

var privateKeysAsText = map[string][]byte{
	// Keys by keytype.
	// TODO: figure out why the ssh lib doesn't want to parse dsa keys
	/* "dsa": []byte(`-----BEGIN OPENSSH PRIVATE KEY-----
	b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABswAAAAdzc2gtZH
	NzAAAAgQDJIfeony2lwltO4tSk9pVr8UT/honvuuLDXEsNdUGI14skLSC/a/KClS14EfNR
	awwk4vJRzVOftWx5yF8yUTf3hqktF3MzyTgArx0zkcVBd71EaQPoXaqdplKbzlqjUKnXmZ
	cTJCbKDt17WaeSdd+0n1WvBZ9dCyKd+i6mmtWhpwAAABUArvYNod3IJ65Pdns8O3S1IQoH
	uisAAACBAJgi7f4LthOgzJCQb3m+QV/MdY5QqxSWJKFPqEgDLNVM7GwbmgJ/ML1rDWabzF
	wFBOkzdcr1l+T24oH10JheDfqXCQzeIOERmBMsetzyJ5YsWrJZS86Gs29s5twE6vHMzdBI
	ilS27mvKcpw4B0OrvotTRbk4ZVxajxwu/AQg+G6BAAAAgQC49hlyghAnoDbqevVTJwuxqI
	1EKiMkMMi0oQ0eiGVyvq8iW+tBf+pWo30TeMaWhA7+4UAIx7Z/BE2f98PGPT8j07NniGGW
	vpaKbEPhPBz2jTuV7Fll4YSExvXsemjtSUGMun02Y0lGbfTQFOm976wSabpIUyFK7q3sWI
	opNThAVAAAAeiN76rwje+q8AAAAAdzc2gtZHNzAAAAgQDJIfeony2lwltO4tSk9pVr8UT/
	honvuuLDXEsNdUGI14skLSC/a/KClS14EfNRawwk4vJRzVOftWx5yF8yUTf3hqktF3MzyT
	gArx0zkcVBd71EaQPoXaqdplKbzlqjUKnXmZcTJCbKDt17WaeSdd+0n1WvBZ9dCyKd+i6m
	mtWhpwAAABUArvYNod3IJ65Pdns8O3S1IQoHuisAAACBAJgi7f4LthOgzJCQb3m+QV/MdY
	5QqxSWJKFPqEgDLNVM7GwbmgJ/ML1rDWabzFwFBOkzdcr1l+T24oH10JheDfqXCQzeIOER
	mBMsetzyJ5YsWrJZS86Gs29s5twE6vHMzdBIilS27mvKcpw4B0OrvotTRbk4ZVxajxwu/A
	Qg+G6BAAAAgQC49hlyghAnoDbqevVTJwuxqI1EKiMkMMi0oQ0eiGVyvq8iW+tBf+pWo30T
	eMaWhA7+4UAIx7Z/BE2f98PGPT8j07NniGGWvpaKbEPhPBz2jTuV7Fll4YSExvXsemjtSU
	GMun02Y0lGbfTQFOm976wSabpIUyFK7q3sWIopNThAVAAAABQEwm/7Rej2vMnmRolZQjXO
	7GPGwgAAAA5rb3JmdXJpQGtlbHl1cwECAw==
	-----END OPENSSH PRIVATE KEY-----
		   `), */
	"ecdsa": []byte(`-----BEGIN OPENSSH PRIVATE KEY-----
b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAaAAAABNlY2RzYS
1zaGEyLW5pc3RwMjU2AAAACG5pc3RwMjU2AAAAQQRlczIaq35UjYEIiUWnjcuWV+25PVWa
55MEeHF6rTfqe2qvGhYslhWf8bhj0B3qmxYmRACkG7a3TjL6RdHrWsEOAAAAqEznyOtM58
jrAAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBGVzMhqrflSNgQiJ
RaeNy5ZX7bk9VZrnkwR4cXqtN+p7aq8aFiyWFZ/xuGPQHeqbFiZEAKQbtrdOMvpF0etawQ
4AAAAgXLK3Srz+b5lsCh2AxJKk+XZNQCUYdSFyFvlUPrPRvpYAAAAOa29yZnVyaUBrZWx5
dXMBAg==
-----END OPENSSH PRIVATE KEY-----`),
	"ed25519": []byte(`-----BEGIN OPENSSH PRIVATE KEY-----
b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW
QyNTUxOQAAACBpqz28j9owxlLC4uDLY/o681e+UrrMMnp+M8JdmbBW4wAAAJg/NdNePzXT
XgAAAAtzc2gtZWQyNTUxOQAAACBpqz28j9owxlLC4uDLY/o681e+UrrMMnp+M8JdmbBW4w
AAAEAjxrTZYFYi635kTsyHzoPN+6q/vYMFjl2EcGKfexEEtGmrPbyP2jDGUsLi4Mtj+jrz
V75Suswyen4zwl2ZsFbjAAAADmtvcmZ1cmlAa2VseXVzAQIDBAUGBw==
-----END OPENSSH PRIVATE KEY-----`),
	"rsa": []byte(`-----BEGIN OPENSSH PRIVATE KEY-----
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
-----END OPENSSH PRIVATE KEY-----`),

	// Keys we use for scenario testing
	"user1": []byte(`-----BEGIN OPENSSH PRIVATE KEY-----
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
-----END OPENSSH PRIVATE KEY-----
`),
	"ca": []byte(`-----BEGIN OPENSSH PRIVATE KEY-----
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
-----END OPENSSH PRIVATE KEY-----
`),
}

func init() {
	var err error

	n := len(privateKeysAsText)
	testPrivateKeys = make(map[string]interface{}, n)
	testSigners = make(map[string]ssh.Signer, n)
	testPublicKeys = make(map[string]ssh.PublicKey, n)
	for t, k := range privateKeysAsText {
		testPrivateKeys[t], err = ssh.ParseRawPrivateKey(k)
		if err != nil {
			panic(fmt.Sprintf("Unable to parse test key %s: %v", t, err))
		}
		testSigners[t], err = ssh.NewSignerFromKey(testPrivateKeys[t])
		if err != nil {
			panic(fmt.Sprintf("Unable to create signer for test key %s: %v", t, err))
		}
		testPublicKeys[t] = testSigners[t].PublicKey()
	}
}
